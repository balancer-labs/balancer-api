{
    "version" : "2017-02-28",
    "operation" : "Query",
    "query" : {
        "expression": "chainId = :chainId",
        "expressionValues" : {
            ":chainId" : $util.dynamodb.toDynamoDBJson($ctx.args.chainId)
        }
    },
    "index": "byTotalLiquidity",
    "scanIndexForward": false,
    "limit": $util.defaultIfNull(${ctx.args.first}, 10),
    #set($filterExpression = [])
    #set($expressionValues = {})
    #foreach($filter in $context.arguments.where.keySet())
        #set($filterSettings = $context.arguments.where.get($filter))
        #if($filterSettings.get("not_in"))
            #set($expressionTerms = "")
            #foreach($i in [1..$filterSettings.not_in.size()])
                #set($expressionTerms = "${expressionTerms} :ni${i}")
                #if( $foreach.hasNext ) #set($expressionTerms = "${expressionTerms},")  #end
                #set($idx = $i - 1)
                #set($ddbDescriber = {"S": $filterSettings.not_in.get($idx)})
                $util.qr($expressionValues.put(":ni${i}", $ddbDescriber))
            #end
            $util.qr($filterExpression.add("NOT ${filter} in (${expressionTerms})"))
        #end
        #if($filterSettings.get("in"))
            #set($expressionTerms = "")
            #foreach($i in [1..$filterSettings.in.size()])
                #set($expressionTerms = "${expressionTerms} :i${i}")
                #if( $foreach.hasNext ) #set($expressionTerms = "${expressionTerms},")  #end
                #set($idx = $i - 1)
                #set($ddbDescriber = {"S": $filterSettings.in.get($idx)})
                $util.qr($expressionValues.put(":i${i}", $ddbDescriber))
            #end
            $util.qr($filterExpression.add(" ${filter} in (${expressionTerms})"))
        #end
        #if($filterSettings.get("contains"))
            #set($expressionTerms = "")
            #foreach($i in [1..$filterSettings.contains.size()])
                #set($expressionTerms = "${expressionTerms} :c${i}")
                #if( $foreach.hasNext ) #set($expressionTerms = "${expressionTerms},")  #end
                #set($idx = $i - 1)
                #set($ddbDescriber = {"S": $filterSettings.contains.get($idx)})
                $util.qr($expressionValues.put(":c${i}", $ddbDescriber))
            #end
            $util.qr($filterExpression.add("contains(${filter}, ${expressionTerms})"))
        #end
    #end
    #set($filterExpressionString = "")
    #foreach($i in [1..$filterExpression.size()])
      #set($idx = $i - 1)
      #set($currentExpression = "${filterExpression.get($idx)}")
      #set($filterExpressionString = "${filterExpressionString} ${currentExpression}")
      #if( $foreach.hasNext ) #set($filterExpressionString = "${filterExpressionString} AND") #end
    #end
    "filter": { 
      "expression": "${filterExpressionString}",
      "expressionValues" :  $util.toJson($expressionValues)
    }
}