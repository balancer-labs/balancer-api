{
    "version" : "2017-02-28",
    "operation" : "Query",
    "query" : {
        "expression": "chainId = :chainId",
        "expressionValues" : {
            ":chainId" : $util.dynamodb.toDynamoDBJson($ctx.args.chainId)
        }
    },
    "index": "byTotalLiquidity",
    "scanIndexForward": false,
    "limit": $util.defaultIfNull(${ctx.args.first}, 10),
    #set($filterExpression = [])
    #set($expressionValues = {})
    #set($expressionNames = {})
    #foreach($filter in $context.arguments.where.keySet())
        #set($filterSettings = $context.arguments.where.get($filter))
        #if($filterSettings.get("not_in"))
            #set($expressionTerms = "")
            #foreach($i in [1..$filterSettings.not_in.size()])
                #set($expressionTerms = "${expressionTerms} :${filter}_ni${i}")
                #if( $foreach.hasNext ) #set($expressionTerms = "${expressionTerms},")  #end
                #set($idx = $i - 1)
                #set($ddbDescriber = {"S": $filterSettings.not_in.get($idx)})
                $util.qr($expressionValues.put(":${filter}_ni${i}", $ddbDescriber))
            #end
            $util.qr($filterExpression.add("NOT ${filter} in (${expressionTerms})"))
        #elseif($filterSettings.get("in"))
            #set($expressionTerms = "")
            #foreach($i in [1..$filterSettings.in.size()])
                #set($expressionTerms = "${expressionTerms} :${filter}_i${i}")
                #if( $foreach.hasNext ) #set($expressionTerms = "${expressionTerms},")  #end
                #set($idx = $i - 1)
                #set($ddbDescriber = {"S": $filterSettings.in.get($idx)})
                $util.qr($expressionValues.put(":${filter}_i${i}", $ddbDescriber))
            #end
            $util.qr($filterExpression.add(" ${filter} in (${expressionTerms})"))
        #elseif($filterSettings.get("contains"))
            #set($expressionTerms = "")
            #foreach($i in [1..$filterSettings.contains.size()])
                #set($expressionTerms = "${expressionTerms} :${filter}_c${i}")
                #if( $foreach.hasNext ) #set($expressionTerms = "${expressionTerms},")  #end
                #set($idx = $i - 1)
                #set($ddbDescriber = {"S": $filterSettings.contains.get($idx)})
                $util.qr($expressionValues.put(":${filter}_c${i}", $ddbDescriber))
            #end
            $util.qr($filterExpression.add("contains(${filter}, ${expressionTerms})"))
        #else 
            #set($generalFilterInput = {})
            $util.qr($generalFilterInput.put("${filter}", $filterSettings))
            #set($generalFilter = "${util.transform.toDynamoDBFilterExpression($generalFilterInput)}")
            #set($generalFilterMap = $util.parseJson($generalFilter))
            #set($generalExpression = $generalFilterMap.get('expression'))
            $util.qr($filterExpression.add($generalExpression))
            #foreach($exName in $generalFilterMap.expressionNames.keySet())
                $util.qr($expressionNames.put($exName, $generalFilterMap.get('expressionNames').get($exName)))
            #end
            #foreach($exValue in $generalFilterMap.expressionValues.keySet())
                $util.qr($expressionValues.put($exValue, $generalFilterMap.get('expressionValues').get($exValue)))
            #end
        #end
    #end
    #set($filterExpressionString = "")
    #foreach($i in [1..$filterExpression.size()])
        #set($idx = $i - 1)
        #set($currentExpression = $filterExpression.get($idx))
        #set($filterExpressionString = "${filterExpressionString} ${currentExpression}")
        #if( $foreach.hasNext ) #set($filterExpressionString = "${filterExpressionString} AND") #end
    #end
    "filter": { 
        "expression": "${filterExpressionString}",
        "expressionNames" : $util.toJson($expressionNames),
        "expressionValues" :  $util.toJson($expressionValues)
    }
}